package noumena.payment.uc;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import noumena.payment.bean.OrdersBean;
import noumena.payment.model.Orders;
import noumena.payment.util.Constants;
import noumena.payment.util.DateUtil;
import noumena.payment.util.OSUtil;
import noumena.payment.vo.OrderIdVO;
import noumena.payment.vo.OrderStatusVO;

public class UCCharge
{
	public static String getTransactionId(Orders order)
	{
		order.setCurrency(Constants.CURRENCY_RMB);
		order.setUnit(Constants.CURRENCY_UNIT_YUAN);
		
		OrdersBean bean = new OrdersBean();
		String cburl = order.getCallbackUrl();
		String payId;
		if (cburl == null || cburl.equals(""))
		{
			payId = bean.CreateOrder(order);
		}
		else
		{
			if (cburl.indexOf("?") == -1)
			{
				cburl += "?pt=" + Constants.PAY_TYPE_UC;
			}
			else
			{
				cburl += "&pt=" + Constants.PAY_TYPE_UC;
			}
			cburl += "&currency=" + Constants.CURRENCY_RMB;
			cburl += "&unit=" + Constants.CURRENCY_UNIT_YUAN;
			
			payId = bean.CreateOrder(order, cburl);
		}
		order.setCallbackUrl(cburl);
		String date = DateUtil.formatDate(order.getCreateTime());
		OrderIdVO orderIdVO = new OrderIdVO(payId, date);
		JSONObject json = JSONObject.fromObject(orderIdVO);
		return json.toString();
	}

	public static String checkOrdersStatus(String payIds)
	{
		String[] orderIds = payIds.split(",");

		OrdersBean bean = new OrdersBean();
		List<Orders> orders = bean.qureyOrders(orderIds);
		List<OrderStatusVO> statusret = new ArrayList<OrderStatusVO>();
		for (int i = 0 ; i < orders.size() ; i++)
		{
			Orders order = orders.get(i);
			order.setProductId(order.getItemId());
			order.setSubId(order.getExInfo());
			int status = order.getKStatus();
			OrderStatusVO st = new OrderStatusVO();
			st.setPayId(order.getOrderId());
			if (status == Constants.K_STSTUS_DEFAULT || status == Constants.K_CON_ERROR)
			{
				Calendar cal1 = DateUtil.getCalendar(order.getCreateTime());
				Calendar cal2 = Calendar.getInstance();
				if ((cal2.getTimeInMillis() - cal1.getTimeInMillis()) >= Constants.ORDER_TIMEOUT)
				{
					status = Constants.K_STSTUS_TIMEOUT;
					st.setStatus(2);
				}
				else
				{
					st.setStatus(3);
				}
			}
			else if (status == Constants.K_STSTUS_SUCCESS)
			{
				//如果订单已经成功，直接返回订单状态
				st.setStatus(1);
			}
			else
			{
				//订单已经失败，直接返回订单状态
				st.setStatus(2);
			}
			statusret.add(st);
		}
		JSONArray arr = JSONArray.fromObject(statusret);
		
		return arr.toString();
	}

	public static void getCallbackFromUC(String res)
	{
		try
		{
			JSONObject json = JSONObject.fromObject(res);
			UCOrderVO ordervo = (UCOrderVO) JSONObject.toBean(json, UCOrderVO.class);
			String orderid = "";
			String payid = "";
			String exinfo = "";
			
			if (ordervo.getData().getTradeId() == null)
			{
				//网络游戏
				orderid = ordervo.getData().getCallbackInfo();
				payid = ordervo.getData().getOrderId();
				exinfo = ordervo.getData().getPayWay() + "#" + ordervo.getData().getUcid();
			}
			else
			{
				//单机游戏
				orderid = ordervo.getData().getOrderId();
				payid = ordervo.getData().getTradeId();
				exinfo = ordervo.getData().getFailedDesc();
			}
			
			OrdersBean bean = new OrdersBean();
			Orders order = bean.qureyOrder(orderid);
			if(order.getAmount().equals(Float.valueOf(ordervo.getData().getAmount()))){
				bean.updateOrderAmountPayIdExinfo(orderid, payid, ordervo.getData().getAmount(), exinfo);
				if (ordervo.getData().getOrderStatus().toLowerCase().equals("s"))
				{
					//支付成功
					bean.updateOrderKStatus(orderid, Constants.K_STSTUS_SUCCESS);
				}
				else
				{
					//支付失败
					bean.updateOrderKStatusNoCB(orderid, Constants.K_STSTUS_ERROR);
				}
			}else{
				System.out.println("=====(" + DateUtil.getCurTimeStr() + ")=====channel(uc cb)->(order:" + order.getOrderId() + "),jin e bu pi pei");
			}
			
	
			String path = OSUtil.getRootPath() + "../../logs/uccb/" + DateUtil.getCurTimeStr().substring(0, 8);
			OSUtil.makeDirs(path);
			String filename = path + "/" + orderid;
			OSUtil.saveFile(filename, res);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
}
