package noumena.payment.unionpay;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import noumena.payment.bean.OrdersBean;
import noumena.payment.model.Orders;
import noumena.payment.util.Constants;
import noumena.payment.util.DateUtil;
import noumena.payment.util.OSUtil;
import noumena.payment.vo.OrderIdVO;
import noumena.payment.vo.OrderStatusVO;

import com.unionpay.upmp.sdk.conf.UpmpConfig;
import com.unionpay.upmp.sdk.service.UpmpService;

public class UnionpayCharge
{
	private static UnionpayParams params = new UnionpayParams();
	private static boolean testmode = false;
	
	public static boolean isTestmode()
	{
		return testmode;
	}
	public static void setTestmode(boolean testmode)
	{
		UnionpayCharge.testmode = testmode;
	}
	
	public static String getTransactionId(Orders order)
	{
		order.setCurrency(Constants.CURRENCY_RMB);
		order.setUnit(Constants.CURRENCY_UNIT_FEN);
		
		OrdersBean bean = new OrdersBean();
		String cburl = order.getCallbackUrl();
		String payId;
		if (cburl == null || cburl.equals(""))
		{
			payId = bean.CreateOrder(order);
		}
		else
		{
			if (cburl.indexOf("?") == -1)
			{
				cburl += "?pt=" + Constants.PAY_TYPE_UNIONPAY;
			}
			else
			{
				cburl += "&pt=" + Constants.PAY_TYPE_UNIONPAY;
			}
			cburl += "&currency=" + Constants.CURRENCY_RMB;
			cburl += "&unit=" + Constants.CURRENCY_UNIT_FEN;
			
			payId = bean.CreateOrder(order, cburl);
		}
		order.setCallbackUrl(cburl);
		String date = DateUtil.formatDate(order.getCreateTime());
		OrderIdVO orderIdVO = new OrderIdVO(payId, date);
		orderIdVO.setMsg(getTransId(payId, order.getAmount()));
		
		JSONObject json = JSONObject.fromObject(orderIdVO);
		return json.toString();
	}
	
	private static String getTransId(String orderid, float amount)
	{
		String ret = "";
        // 请求要素
		Map<String, String> req = new HashMap<String, String>();
		req.put("version", UpmpConfig.VERSION);// 版本号
		req.put("charset", UpmpConfig.CHARSET);// 字符编码
		req.put("transType", "01");// 交易类型
		req.put("merId", UpmpConfig.MER_ID);// 商户代码
		req.put("backEndUrl", UpmpConfig.MER_BACK_END_URL);// 通知URL
//		req.put("frontEndUrl", UpmpConfig.MER_FRONT_END_URL);// 前台通知URL(可选)
		req.put("orderDescription", "订单描述");// 订单描述(可选)
		req.put("orderTime", new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()));// 交易开始日期时间yyyyMMddHHmmss
		req.put("orderTimeout", "");// 订单超时时间yyyyMMddHHmmss(可选)
		while (orderid.length() < 8)
		{
			orderid = "0" + orderid;
		}
		req.put("orderNumber", orderid);//订单号(商户根据自己需要生成订单号)
		req.put("orderAmount", ((int) amount) + "");// 订单金额
        req.put("orderCurrency", "156");// 交易币种(可选)
        req.put("reqReserved", "透传信息");// 请求方保留域(可选，用于透传商户信息)
        
        // 保留域填充方法
        Map<String, String> merReservedMap = new HashMap<String, String>();
        merReservedMap.put("test", "test");
        req.put("merReserved", UpmpService.buildReserved(merReservedMap));// 商户保留域(可选)

		Map<String, String> resp = new HashMap<String, String>();
		boolean validResp = UpmpService.trade(req, resp);
	       
        // 商户的业务逻辑
        if (validResp){
            // 服务器应答签名验证成功
            ret = resp.get("tn");
        }else {
            // 服务器应答签名验证失败
            
        }
        
        return ret;
	}
	
	public static String checkOrdersStatus(String payIds)
	{
		String[] orderIds = payIds.split(",");

		OrdersBean bean = new OrdersBean();
		List<Orders> orders = bean.qureyOrders(orderIds);
		List<OrderStatusVO> statusret = new ArrayList<OrderStatusVO>();
		for (int i = 0 ; i < orders.size() ; i++)
		{
			Orders order = orders.get(i);
			int status = order.getKStatus();
			OrderStatusVO st = new OrderStatusVO();
			st.setPayId(order.getOrderId());
			if (status == Constants.K_STSTUS_DEFAULT || status == Constants.K_CON_ERROR)
			{
				//如果订单状态是初始订单或者是网络连接有问题状态，返回不知道
				Calendar cal1 = DateUtil.getCalendar(order.getCreateTime());
				Calendar cal2 = Calendar.getInstance();
				if ((cal2.getTimeInMillis() - cal1.getTimeInMillis()) >= Constants.ORDER_TIMEOUT)
				{
					st.setStatus(4);
				}
				else
				{
					st.setStatus(3);
				}
			}
			else if (status == Constants.K_STSTUS_SUCCESS)
			{
				//如果订单已经成功，直接返回订单状态
				st.setStatus(1);
			}
			else
			{
				//订单已经失败，直接返回订单状态
				st.setStatus(2);
			}
			statusret.add(st);
		}
		JSONArray arr = JSONArray.fromObject(statusret);
		
		return arr.toString();
	}

	public static String getCallbackFromUnionpay(Map<String,String> params, String transStatus, String orderNumber)
	{
		String ret = "success";
		
		while (orderNumber.substring(0, 1).equals("0"))
		{
			orderNumber = orderNumber.substring(1);
		}

		if (UpmpService.verifySignature(params))
		{
			OrdersBean bean = new OrdersBean();
			// 服务器签名验证成功
			if (null != transStatus && transStatus.equals("00"))
			{
			    // 交易处理成功
				try
				{
					//支付成功
					Orders order = bean.qureyOrder(orderNumber);
					if (order != null)
					{
						if (order.getKStatus() != Constants.K_STSTUS_SUCCESS)
						{
							bean.updateOrderAmountPayIdExinfo(orderNumber, params.get("qn"), params.get("settleAmount"), params.get("settleCurrency"));
							bean.updateOrderKStatus(orderNumber, Constants.K_STSTUS_SUCCESS);
						}
						else
						{
							System.out.println("unionpay order (" + order.getOrderId() + ") had been succeed");
						}
					}
				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
			else
			{
				//支付失败
				bean.updateOrderKStatus(orderNumber, Constants.K_STSTUS_ERROR);
			}
		
			ret = "success";
		}
		else
		{
			// 服务器签名验证失败
			ret = "fail";
		}

		System.out.println("unionpay cb ->" + params.toString());
		System.out.println("unionpay cb ret->" + ret);
		
		String path = OSUtil.getRootPath() + "../../logs/unionpaycb/" + DateUtil.getCurTimeStr().substring(0, 8);
		OSUtil.makeDirs(path);
		String filename = path + "/" + orderNumber;
		
		OSUtil.saveFile(filename, params.toString());
		
		return ret;
	}

	public static String queryOrderFromUnionpay(String querydate, String queryorderid)
	{
		String ret = "success";

		Map<String, String> req = new HashMap<String, String>();
		req.put("version", UpmpConfig.VERSION);// 版本号
		req.put("charset", UpmpConfig.CHARSET);// 字符编码
		req.put("transType", "01");// 交易类型
		req.put("merId", UpmpConfig.MER_ID);// 商户代码
		req.put("orderTime", querydate);// 交易开始日期时间yyyyMMddHHmmss或yyyyMMdd
		req.put("orderNumber", queryorderid);// 订单号
		// 保留域填充方法
        Map<String, String> merReservedMap = new HashMap<String, String>();
        merReservedMap.put("test", "test");
        req.put("merReserved", UpmpService.buildReserved(merReservedMap));// 商户保留域(可选)
		
		Map<String, String> resp = new HashMap<String, String>();
		boolean validResp = UpmpService.query(req, resp);
	       
        // 商户的业务逻辑
        if (validResp)
        {
            // 服务器应答签名验证成功
        	System.out.println("union pay query ret->" + resp.toString());
        	ret = resp.toString();
        }
        else
        {
            // 服务器应答签名验证失败
            
        }
		return ret;
	}
	
	public static void init()
	{
//		params.addApp("gaoguai", "4038", "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDPtxJwSjpyMd23NhJqVR3o7QvA/0ZXhNBxmZ29FBsH/DwjxuhcYYz08GIWRF6AT0Watxu2In9M7Rnbecyy4uyT9gJG4WWbBCPa592+N7i88/zpP18equvHUT+US833pjw4jBebFOEAgGATC4rTbqjNiH5TXbcZrfFHkxapNsuYiwIDAQAB");	//2ec36f47fb4714a5971112a2e80a54cf
	}
}
