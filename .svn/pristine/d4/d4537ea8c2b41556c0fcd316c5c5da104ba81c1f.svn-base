package noumena.payment.wandoujia;

import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import noumena.payment.bean.OrdersBean;
import noumena.payment.model.Orders;
import noumena.payment.util.Constants;
import noumena.payment.util.DateUtil;
import noumena.payment.util.OSUtil;
import noumena.payment.vo.OrderIdVO;
import noumena.payment.vo.OrderStatusVO;

public class WandoujiaCharge
{
	private static WandoujiaParams params = new WandoujiaParams();
	private static boolean testmode = false;
	
	public static boolean isTestmode()
	{
		return testmode;
	}
	public static void setTestmode(boolean testmode)
	{
		WandoujiaCharge.testmode = testmode;
	}
	
	public static String getTransactionId(Orders order)
	{
		order.setCurrency(Constants.CURRENCY_RMB);
		order.setUnit(Constants.CURRENCY_UNIT_FEN);
		
		OrdersBean bean = new OrdersBean();
		String cburl = order.getCallbackUrl();
		String payId;
		if (cburl == null || cburl.equals(""))
		{
			payId = bean.CreateOrder(order);
		}
		else
		{
			if (cburl.indexOf("?") == -1)
			{
				cburl += "?pt=" + Constants.PAY_TYPE_WANDOUJIA;
			}
			else
			{
				cburl += "&pt=" + Constants.PAY_TYPE_WANDOUJIA;
			}
			cburl += "&currency=" + Constants.CURRENCY_RMB;
			cburl += "&unit=" + Constants.CURRENCY_UNIT_FEN;
			
			payId = bean.CreateOrder(order, cburl);
		}
		order.setCallbackUrl(cburl);
		String date = DateUtil.formatDate(order.getCreateTime());
		OrderIdVO orderIdVO = new OrderIdVO(payId, date);
		
		JSONObject json = JSONObject.fromObject(orderIdVO);
		return json.toString();
	}
	
	public static String checkOrdersStatus(String payIds)
	{
		String[] orderIds = payIds.split(",");

		OrdersBean bean = new OrdersBean();
		List<Orders> orders = bean.qureyOrders(orderIds);
		List<OrderStatusVO> statusret = new ArrayList<OrderStatusVO>();
		for (int i = 0 ; i < orders.size() ; i++)
		{
			Orders order = orders.get(i);
			int status = order.getKStatus();
			OrderStatusVO st = new OrderStatusVO();
			st.setPayId(order.getOrderId());
			if (status == Constants.K_STSTUS_DEFAULT || status == Constants.K_CON_ERROR)
			{
				//如果订单状态是初始订单或者是网络连接有问题状态，返回不知道
				st.setStatus(3);
			}
			else if (status == Constants.K_STSTUS_SUCCESS)
			{
				//如果订单已经成功，直接返回订单状态
				st.setStatus(1);
			}
			else
			{
				//订单已经失败，直接返回订单状态
				st.setStatus(2);
			}
			statusret.add(st);
		}
		JSONArray arr = JSONArray.fromObject(statusret);
		
		return arr.toString();
	}

	public static String getCallbackFromWandoujia(String transdata, String sign)
	{
		String ret = WandoujiaParams.SUCCESS;
		try
		{
			if (transdata == null || "".equalsIgnoreCase(transdata))
			{
				return WandoujiaParams.FAILURE;
			}
			if (sign == null || "".equalsIgnoreCase(sign))
			{
				return WandoujiaParams.FAILURE;
			}

			OrdersBean bean = new OrdersBean();
			JSONObject json = JSONObject.fromObject(transdata);
			WandoujiaOrderVO ordervo = (WandoujiaOrderVO) JSONObject.toBean(json, WandoujiaOrderVO.class);
			Orders order = bean.qureyOrder(ordervo.getOut_trade_no());
			
			if (order != null)
			{
				boolean isvlid = validMessage(transdata, sign, ordervo.getAppKeyId());
	
				if (!isvlid)
				{
					return WandoujiaParams.FAILURE;
				}
				else
				{
					if (order.getKStatus() != Constants.K_STSTUS_SUCCESS)
					{
						bean.updateOrderAmountPayId(ordervo.getOut_trade_no(), ordervo.getOrderId(), ordervo.getMoney());
						
						//支付成功
						bean.updateOrderKStatus(ordervo.getOut_trade_no(), Constants.K_STSTUS_SUCCESS);
					}
					else
					{
						System.out.println("wandoujia order (" + order.getOrderId() + ")(" + order.getPayId() + ") had been succeed");
					}
				}
				
				String path = OSUtil.getRootPath() + "../../logs/wandoujiacb/" + DateUtil.getCurTimeStr().substring(0, 8);
				OSUtil.makeDirs(path);
				String filename = path + "/" + ordervo.getOut_trade_no() + "_" + ordervo.getOrderId();
				
				String res = "";
				res += "transdata=" + transdata;
				res += "&sign=" + sign;
				OSUtil.saveFile(filename, res);
			}
			else
			{
				ret = "ILLEGAL ORDER";
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			ret = WandoujiaParams.FAILURE;
		}
		return ret;
	}

	private static boolean validMessage(String transdata, String sign, String appid) throws Exception
	{
		return WandouRsa.doCheck(transdata, sign);
	}
	
	public static void init()
	{
		params.initParams(WandoujiaParams.CHANNEL_ID, new WandoujiaParamsVO());
////		params.addApp("t6", "100000145", "5ebfe555197b0d79d5464a6917bd2bd3");
//		params.addApp("t6", "100000159", "c0e8fa1663f879e3e269e2a627a3a919");
////		params.addApp("hero", "100000403", "302fe748ea1a9a028ef3b841ef3dd4ac");
////		params.addApp("hero", "100000429", "2b1c46d8af42a4adcf345776ec46608d");
//		params.addApp("hero", "100000463", "d0fbe6b37574192391db4e41e35d8310");
//		params.addApp("gaoguai", "100000529", "c0c71af5ef4666e492001861f4160bb5");
//		params.addApp("m1", "100001127", "02082ec809a5d5814bb760db3f00bbca");
//		params.addApp("m5", "100012879", "0b38503873a88c0a243a580ff3368f28");
//		params.addApp("Qzhuan", "100017357", "6361c2d8c1e4a2ff32edde905af3a324");
//		params.addApp("m3", "100018309", "2a2f758dfa8feb6461ed7c836d62e959");	//M3
//		params.addApp("gongzhu", "100018901", "23e6679ab3aad58ad28ea307c452608e");	//小青蛙
	}
}
