package noumena.payment.quick;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.xml.XMLSerializer;
import noumena.payment.bean.CallbackBean;
import noumena.payment.bean.OrdersBean;
import noumena.payment.model.Callback;
import noumena.payment.model.Orders;
import noumena.payment.util.Constants;
import noumena.payment.util.DateUtil;
import noumena.payment.util.OSUtil;
import noumena.payment.util.StringEncrypt;
import noumena.payment.vo.OrderIdVO;
import noumena.payment.vo.OrderStatusVO;

public class QuickCharge
{
	private static QuickParams params = new QuickParams();
	private static boolean testmode = false;
	
	public static boolean isTestmode()
	{
		return testmode;
	}
	public static void setTestmode(boolean testmode)
	{
		QuickCharge.testmode = testmode;
	}
	
	public static String getTransactionId(Orders order)
	{
		order.setCurrency(Constants.CURRENCY_RMB);
		order.setUnit(Constants.CURRENCY_UNIT_YUAN);
		
		OrdersBean bean = new OrdersBean();
		String cburl = order.getCallbackUrl();
		String payId;
		if (cburl == null || cburl.equals(""))
		{
			payId = bean.CreateOrder(order);
		}
		else
		{
			/*if (cburl.indexOf("?") == -1)
			{
				cburl += "?pt=" + paytype;
			}
			else
			{
				cburl += "&pt=" + paytype;
			}*/
			cburl += "&currency=" + Constants.CURRENCY_RMB;
			cburl += "&unit=" + Constants.CURRENCY_UNIT_YUAN;
			
			payId = bean.CreateOrder(order, cburl);
		}
		order.setCallbackUrl(cburl);
		String date = DateUtil.formatDate(order.getCreateTime());
		OrderIdVO orderIdVO = new OrderIdVO(payId, date);
		
		JSONObject json = JSONObject.fromObject(orderIdVO);
		return json.toString();
	}

	public static String checkOrdersStatus(String payIds)
	{
		String[] orderIds = payIds.split(",");

		OrdersBean bean = new OrdersBean();
		List<Orders> orders = bean.qureyOrders(orderIds);
		List<OrderStatusVO> statusret = new ArrayList<OrderStatusVO>();
		for (int i = 0 ; i < orders.size() ; i++)
		{
			Orders order = orders.get(i);
			int status = order.getKStatus();
			OrderStatusVO st = new OrderStatusVO();
			st.setPayId(order.getOrderId());
			if (status == Constants.K_STSTUS_DEFAULT || status == Constants.K_CON_ERROR)
			{
				//如果订单状态是初始订单或者是网络连接有问题状态，返回不知道
				Calendar cal1 = DateUtil.getCalendar(order.getCreateTime());
				Calendar cal2 = Calendar.getInstance();
				if ((cal2.getTimeInMillis() - cal1.getTimeInMillis()) >= Constants.ORDER_TIMEOUT)
				{
					st.setStatus(4);
				}
				else
				{
					st.setStatus(3);
				}
			}
			else if (status == Constants.K_STSTUS_SUCCESS)
			{
				//如果订单已经成功，直接返回订单状态
				st.setStatus(1);
			}
			else
			{
				//订单已经失败，直接返回订单状态
				st.setStatus(2);
			}
			statusret.add(st);
		}
		JSONArray arr = JSONArray.fromObject(statusret);
		
		return arr.toString();
	}
	
	/**
	 * @param appid
	 * @param nt_data
	 * @param sign
	 * @param md5Sign
	 * @return
	 */
	public static String getCallbackFromQuick(String appid,String nt_data,String sign,String md5Sign)
	{
		//
		System.out.println("=====(" + DateUtil.getCurTimeStr() + ")=====channel(quickcbparams)->"+appid+"-----"+nt_data+"-----"+sign+"-----"+md5Sign);
    	
		String ret = "SUCCESS";   
    	String qianming = StringEncrypt.Encrypt(nt_data+sign+params.getParams(appid).getAppkey());
		if(qianming.equals(md5Sign)){
			String result = QuickDesUtil.decode(nt_data, params.getParams(appid).getAppkey());
			XMLSerializer xmlSerializer = new XMLSerializer();
			JSONObject jsonObj = JSONObject.fromObject(xmlSerializer.read(result).toString());
			JSONObject jb = JSONObject.fromObject(jsonObj.getString("message"));
			String orderid = jb.getString("game_order");
			OrdersBean bean = new OrdersBean();
			Orders order = bean.qureyOrder(orderid);
			if (order != null){
				if(order.getAmount().equals(Float.valueOf(jb.getString("amount")))){
					if("0".equals(jb.getString("status"))){
		        		if (order.getIscallback() == Constants.CALLBACK_ON){
							CallbackBean callbackBean = new CallbackBean();
							Callback callbackvo = callbackBean.qureyCallback(orderid);
							String cburl = callbackvo.getCallbackUrl();
							if (cburl != null && !cburl.equals("")){
								if (cburl.indexOf("?") == -1){
									cburl += "?pt=quick_" + jb.getString("channel");
								}else{
									cburl += "&pt=quick_" + jb.getString("channel");
								}
								callbackvo.setCallbackUrl(cburl);
								callbackBean.updateCallback(callbackvo);
							}
						}
		        		order.setPayId(jb.getString("order_no"));
		        		order.setMoney(jb.getString("amount"));
		        		order.setUpdateTime(DateUtil.getCurrentTime());
		        		order.setExInfo(jb.getString("is_test"));
		        		order.setPayType("quick_"+jb.getString("channel"));
		        		bean.updateOrder(orderid, order);
		        		bean.updateOrderKStatus(orderid,Constants.K_STSTUS_SUCCESS);
					}else{
						bean.updateOrderAmountPayIdExinfo(orderid, jb.getString("order_no"), jb.getString("amount"), jb.getString("is_test"));
						bean.updateOrderKStatus(orderid,Constants.K_STSTUS_ERROR);
						ret = "FAILED";
					}
				}else{
					System.out.println(jb.getString("game_order")+"：jine_is_diff");
					ret = "FAILED";
				}
				
			}
			String path = OSUtil.getRootPath() + "../../logs/quickcb/"
					+ DateUtil.getCurTimeStr().substring(0, 8);
			OSUtil.makeDirs(path);
			String filename = path + "/" + orderid;

			OSUtil.saveFile(filename, appid+"-----"+nt_data+"-----"+sign+"-----"+md5Sign);
		}else{
			System.out.println("===="+ DateUtil.getCurTimeStr() +"====appid:"+appid+" sign is fail");
			ret = "SignError";
		}
		System.out.println("quick cb ret->" + ret);
		return ret;
	}

	public static void init()
	{
		params.initParams(QuickParams.CHANNEL_ID, new QuickParamsVO());
	}
	
	public static void main(String args[]){
		String ntdata
		String xml = QuickDesUtil.decode(ntdata, "41389824350937921239991400052996");
		System.out.println(xml);
		XMLSerializer xmlSerializer = new XMLSerializer();
		JSONObject jsonObj = JSONObject.fromObject(xmlSerializer.read(xml).toString());
		JSONObject jb = JSONObject.fromObject(jsonObj.getString("message"));
		System.out.println(Float.parseFloat(jb.getString("amount")));
	}
}
